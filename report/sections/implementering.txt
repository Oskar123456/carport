src/main/java/carport/
├── config
│   ├── SessionConfig.java
│   └── ThymeleafConfig.java
├── controllers
│   ├── AdminFunctionController.java
│   ├── BasketController.java
│   ├── CustomCarportController.java
│   ├── MainController.java
│   ├── OrderController.java
│   ├── SearchController.java
│   └── UserController.java
├── entities
│   ├── Address.java
│   ├── CustomCarport.java
│   ├── Order.java
│   ├── ProductCategory.java
│   ├── ProductComponent.java
│   ├── ProductDocumentation.java
│   ├── ProductImage.java
│   ├── Product.java
│   ├── ProductSpecification.java
│   └── User.java
├── exceptions
│   └── DatabaseException.java
├── Main.java
├── persistence
│   ├── AddressMapper.java
│   ├── CarportMapper.java
│   ├── CatAndSpecMapper.java
│   ├── ConnectionPool.java
│   ├── OrderMapper.java
│   ├── ProductMapper.java
│   └── UserMapper.java
└── tools
    ├── ImageWrangler.java
    ├── ProductImageFactory.java
    ├── SvgHelper.java
    └── types
        ├── Point.java
        └── Rectangle.java

 -- Særlige forhold (IGANG)
For at vise billeder på hjemmesiden er klasserne 
ProductImageFactory og ImageWrangler skrevet. De 
skal indlæse billeder fra URL, samt formatere 
billederne i nogen entities.ProductImage 
objekter, før de kan sættes ind i- eller 
hives ud af databasen.

Til at tegne de skræddersyede (custom) carporte 
er der skrevet SvgHelper, til at hjælpe klassen 
CustomCarport med at omdanne sine entities til en 
SVG tegning.

Siden produkters attributter egentlig er delt 
op i flere tabeller i databasen, er et længere 
sql script der sammensætter alle disse lagt i 
src/main/resources/sql/select-products-by-id.sql. 
Man kunne også have lavet et view, men så skulle 
det opdateres, hver gang brugeren tilføjer eller 
fjerner et produkt, hvilket vores hjemmeside 
understøtter.



-- Udvalgte kodeeksempler (IGANG)


-- Status på implementering (IGANG)
Hjemmesiden har en del mangler hvad angår 
udseende/styling, f.eks. stemmer alle sider ikke 
nødvendigvis overens i udseende, eller har 
måske ikke præcis den samme header/footer (
noget man kunne garantere med html-injection 
via thymeleaf, eller andet). Derudover 
kom hjemmesiden heller ikke til at stå 
ordentligt på mindre (smartphone) skærme. 
Der er forsøgt at lave lidt media-queries, og 
nogle funktioner virker, men især admin 
funktionalitet og link-opførsel samt 
udseende er ikke acceptable for mindre skærme.

CustomCarports beregning af materialer 
(det vi bruger til at indsætte stykliste/
components i databasen), er relativt simpel. 
Dvs. den egentlig dividerer en længde, der 
skal dækkes med længden af det stykke træ/
tagplade der skal dække det, og runder op. 
Dermed bliver der selvfølgelig smidt en 
del byggemateriale ud, som man i praksis 
måske ville bruge til en anden del af 
carporten.

-- Kvalitetssikring (test) (IGANG)
Der er skrevet automatiserede test til 
en meget lille del af programmet. En 
unit test af CustomCarport, og en 
integrationstest af ProductMapper. 

Unit testen er meget simpel, mens 
integrationstesten går lidt mere i 
dybden med den søgefunktion, som blev 
implementeret.

Koden er særligt testet manuelt, 
dvs. før en ny user story eller et 
"pre-requisite" (som at få en hjemmeside 
op at stå eller databasen), blev de 
testet indtil de fandtes tilfredsstillende 
ift. de acceptkriterier der var tilknyttet. 

F.eks. blev søgefunktionen og custom carport 
grundigt testet manuelt undervejs.





